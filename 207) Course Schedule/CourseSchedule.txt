class Solution {
    // class Node(){
    //     int val;
    //     int indegree;
    //     public Node(int val){
    //         this.val = val;
    //         this.indegree = 0;
    //     }
    // }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, ArrayList<Integer>> m = new HashMap<Integer, ArrayList<Integer>>();
        int[] nodes = new int[numCourses];
        // for(int i=0;i<numCourses;i++){
        //     Node n = new Node(i);
        // }
        for(int i=0;i<prerequisites.length;i++){
            if(m.containsKey(prerequisites[i][0])){
                ArrayList<Integer> temp = m.get(prerequisites[i][0]);
                temp.add(prerequisites[i][1]);
                m.put(prerequisites[i][0], temp);
            }
            else{
                ArrayList<Integer> temp = new ArrayList<Integer>();
                temp.add(prerequisites[i][1]);
                m.put(prerequisites[i][0], temp );
            }
           nodes[prerequisites[i][1]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i=0; i<nodes.length;i++)
            if(nodes[i] == 0)
                q.add(i);
        int processed = 0;
        while(!q.isEmpty()){
            System.out.println(q.toString()); 
            int u = q.remove();
            ++processed;
            if(!m.containsKey(u))
                continue;
            ArrayList<Integer> temp = m.get(u);
            for(int j=0;j<temp.size();j++){
                nodes[temp.get(j)]--;
                if(nodes[temp.get(j)] == 0){
                    q.add(temp.get(j));
                }
            }
        }
        if(processed != numCourses)
            return false;
        return true;
    }
}
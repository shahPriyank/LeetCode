class TrieNode {
    TrieNode[] children;
    boolean isEOF;
    // Initialize your data structure here.
    public TrieNode() {
        this.children = new TrieNode[26];
    }
 
}
public class Trie {
    private TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode p = root;
        for(int i=0;i<word.length();i++){
            int index = word.charAt(i) - 'a';
            if(p.children[index] == null){
                TrieNode temp = new TrieNode();
                p.children[index] = temp;
                p=temp;
            }
            else{
                p = p.children[index] ;
            }
        }
        p.isEOF = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode p = root;
        for(char c: word.toCharArray() ){
            int index = c-'a';
            if(p.children[index] != null){
                p = p.children[index];
            }
            else
                return false;
        }
        if(p.isEOF)
            return true;
        return false;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode p = root;
        for(char c: prefix.toCharArray() ){
            int index = c-'a';
            if(p.children[index] != null){
                p = p.children[index];
            }
            else
                return false;
        }
        return true;
    }
}
class Solution {
    public int findKthLargest(int[] nums, int k) {
        // PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        // for(int i:nums){
        //     pq.add(i);
        // }
        // int small = nums.length - k + 1;
        // while(small!=1){
        //     pq.remove();
        //     small--;
        // }
        // return pq.poll();
        PriorityQueue<Integer> pq = new PriorityQueue<>(new MaxHeapComparator());
        for(int i:nums){
            pq.add(i);
        }
        while(k>1){
            pq.remove();
            k--;
        }
        
        // System.out.println(pq.toString());
        return pq.poll();
    }
    
    static class MaxHeapComparator implements Comparator<Integer>{
        @Override
        public int compare(Integer a, Integer b){
            return b.compareTo(a);
        }
    }
}

// class Solution {
//     public int findKthLargest(int[] nums, int k) {
//         if(nums==null || k>nums.length)
//             return -1;
//         return partitionHelper(nums, k, 0, nums.length-1);
//     }
//     private int partitionHelper(int[] nums, int k, int start, int end) {
//         int mid = nums[(start+end)/2];
//         int left = start, right = end;
//         while(left<=right) {
//             while(left<=right && nums[left]>mid) {
//                 left++;
//             }
//             while(left<=right && nums[right]<mid) {
//                 right--;
//             }
//             if(left<=right) {
//                 int temp = nums[left];
//                 nums[left++] = nums[right];
//                 nums[right--] = temp;
//             }
//         }

//         if(right - start +1 >= k)
//             return partitionHelper(nums, k, start, right);
//         if(left - start < k)
//             return partitionHelper(nums, k-(left-start), left, end);
//         return nums[right+1];
        
//     }
// }
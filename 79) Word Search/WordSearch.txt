// class Solution {
//     public boolean exist(char[][] board, String word) {
//         int m =board.length;
//         int n = board[0].length;
//         boolean flag = false;
//         for(int i=0;i<m;i++){
//             for(int j=0;j<n;j++){
//                 if(board[i][j] == word.charAt(0)){
//                     boolean[][] visited = new boolean[m][n];
//                     if(dfs(board,i,j,visited,m,n,1,word)){
//                         return true;
//                     }
//                 }
//             }
//         }
//         // if(flag)
//         //     return true;
//         return false;
//     }
//     public static boolean dfs(char[][] board, int i, int j, boolean[][] visited, int m, int n, int p, String word){
//         // System.out.println(i+" "+j);
//         // System.out.println(Arrays.deepToString(visited));
//         if(p==word.length())
//             return true;
//         visited[i][j] = true;
//         int[] dx = {0,-1,0,1};
//         int[] dy = {-1,0,1,0};
//         for(int k=0;k<dx.length;k++){
//             // if(i==1 && j==3)
//                 // System.out.println(p+" "+(i+dx[k])+" " +(j+dy[k]));
//                 // System.out.println(Arrays.deepToString(visited));
//             if(isValid(i+dx[k],j+dy[k],m,n) && !visited[i+dx[k]][j+dy[k]] && word.charAt(p) == board[i+dx[k]][j+dy[k]]){
//                 // System.out.println(i+" "+j+" "+(i+dx[k])+" "+(j+dy[k]));
//                 if(dfs(board,i+dx[k],j+dy[k],visited,m,n,p+1,word))
//                     return true;
//             }
//         }
//         visited[i][j] = false;
//         return false;
//     }
//     public static boolean isValid(int i,int j, int m, int n){
//         if(i>=0 && i<m && j>=0 && j<n)
//             return true;
//         return false;
//     }
// }
class Solution 
{
    public boolean exist(char[][] board, String word) 
    {
        char[] w = word.toCharArray();
        for (int i=0; i<board.length; i++)
        {
            for(int j=0; j<board[i].length; j++)
            {
                if (board[i][j] == w[0] && dfs(board, i, j, w, 0))
                    return true;
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] board, int i, int j, char[] w, int idx)
    {
        if (idx == w.length) return true;
        if (i < 0 || i >= board.length || j < 0 || j >= board[i].length || w[idx] != board[i][j]) return false;
        char tmp = board[i][j];
        board[i][j] = '.';
        if (dfs(board, i+1, j, w, idx+1) || 
            dfs(board, i-1, j, w, idx+1) || 
            dfs(board, i, j-1, w, idx+1) ||
            dfs(board, i, j+1, w, idx+1))
            return true;
        board[i][j] = tmp;
        return false;
    }
}
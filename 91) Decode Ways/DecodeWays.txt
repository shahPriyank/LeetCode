public class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0) {
            return 0;
        }
        int n = s.length();
        int[] dp = new int[n+1];
        dp[0] = 1;
        dp[1] = s.charAt(0) != '0' ? 1 : 0;
        for(int i = 2; i <= n; i++) {
            int first = Integer.valueOf(s.substring(i-1, i));
            int second = Integer.valueOf(s.substring(i-2, i));
            if(first >= 1 && first <= 9) {
               dp[i] += dp[i-1];  
            }
            if(second >= 10 && second <= 26) {
                dp[i] += dp[i-2];
            }
        }
        return dp[n];
    }
}

// class Solution {
//     public int numDecodings(String s) {
//         int n = s.length();
//         int ways2 = 1;
//         int ways1 = s.charAt(n-1) == '0' ? 0 : 1;
        
//         for (int i = n-2; i >= 0; i--) {
//             int temp = ways1;
            
//             if (s.charAt(i) == '0') {
//                 ways1 = 0;
//             }
//             else if (s.charAt(i) == '1' || (s.charAt(i) == '2' && s.charAt(i+1) <= '6')){
//                 ways1 = ways1 + ways2;
//             }
            
//             ways2 = temp;
//         }
        
//         return ways1;
//     }
// }
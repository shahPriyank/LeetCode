// // Java Iterator interface reference:
// // https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html
// class PeekingIterator implements Iterator<Integer> {
//     List<Integer> list;
// 	public PeekingIterator(Iterator<Integer> iterator) {
// 	    // initialize any member here.
//         list = new ArrayList<>();
//         iterator.forEachRemaining(list::add);
//         // System.out.println(list);
// 	}

//     // Returns the next element in the iteration without advancing the iterator.
// 	public Integer peek() {
//         return list.get(0);
// 	}

// 	// hasNext() and next() should behave the same as in the Iterator interface.
// 	// Override them if needed.
// 	@Override
// 	public Integer next() {
//         int temp = list.get(0);
//         list.remove(0);
// 	    return temp;
// 	}

// 	@Override
// 	public boolean hasNext() {
// 	    if(list.size()>0)
//             return true;
//         return false;
// 	}
// }
class PeekingIterator implements Iterator<Integer> {  
    private Integer next = null;
    private Iterator<Integer> iter;

    public PeekingIterator(Iterator<Integer> iterator) {
        // initialize any member here.
        iter = iterator;
        if (iter.hasNext())
            next = iter.next();
        System.out.println(next);
    }
    
    // Returns the next element in the iteration without advancing the iterator. 
    public Integer peek() {
        return next;
    }

    // hasNext() and next() should behave the same as in the Iterator interface.
    // Override them if needed.
    @Override
    public Integer next() {
        Integer res = next;
        next = iter.hasNext() ? iter.next() : null;
        return res; 
    }

    @Override
    public boolean hasNext() {
        return next != null;
    }
}
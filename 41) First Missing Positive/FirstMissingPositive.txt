class Solution {
    public int firstMissingPositive(int[] nums) {
        if(nums == null || nums.length == 0)
            return 1;
        ArrayList<Integer> l = new ArrayList<Integer>();
        int max = 0;
        int min = 0;
        for(int a:nums)
            l.add(a);
        max = Collections.max(l);
        min = Collections.min(l);
        if(max<0 || min > 1)
            return 1;
        int i = 1;
        while(true){
            if(l.contains(i))
                i++;
            else
                return i;
        }
    }
}

// public class Solution {
//     public int firstMissingPositive(int[] A) {
//         int i = 0;
//         while(i < A.length){
//             if(A[i] == i+1 || A[i] <= 0 || A[i] > A.length) i++;
//             else if(A[A[i]-1] != A[i]) swap(A, i, A[i]-1);
//             else i++;
//         }
//         i = 0;
//         while(i < A.length && A[i] == i+1) i++;
//         return i+1;
//     }
    
//     private void swap(int[] A, int i, int j){
//         int temp = A[i];
//         A[i] = A[j];
//         A[j] = temp;
//     }
// }